{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\Projects\\\\chat-app-react\\\\src\\\\containers\\\\message\\\\MessageList.js\";\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { messagesRequested } from '../../store/actions';\nimport Message from '../../components/message/Message';\nimport './MessageList.scss';\n\nconst MessageList = _ref => {\n  let {\n    conversationId,\n    getMessagesForConversation,\n    loadMessages\n  } = _ref;\n  const messageDetails = getMessagesForConversation(conversationId);\n  const messages = messageDetails ? messageDetails.messages : null;\n  let messageItems = null;\n  useEffect(() => {\n    if (!messageDetails) {\n      loadMessages(conversationId, null);\n    }\n  }, [messageDetails, loadMessages, conversationId]);\n\n  if (messages && messages.length > 0) {\n    messageItems = messages.map((message, index) => {\n      return /*#__PURE__*/React.createElement(Message, {\n        key: index,\n        isMyMessage: message.isMyMessage,\n        message: message,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 20\n        }\n      });\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"chat-message-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, messageItems);\n};\n\nconst mapStateToProps = state => {\n  const getMessagesForConversation = conversationId => {\n    return state.messagesState.messageDetails[conversationId];\n  };\n\n  return {\n    getMessagesForConversation\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  const loadMessages = (conversationId, lastMessageId) => {\n    dispatch(messagesRequested(conversationId, 5, lastMessageId));\n  };\n\n  return {\n    loadMessages\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MessageList);","map":{"version":3,"names":["React","useEffect","connect","messagesRequested","Message","MessageList","conversationId","getMessagesForConversation","loadMessages","messageDetails","messages","messageItems","length","map","message","index","isMyMessage","mapStateToProps","state","messagesState","mapDispatchToProps","dispatch","lastMessageId"],"sources":["C:/Users/LENOVO/Projects/chat-app-react/src/containers/message/MessageList.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { messagesRequested } from '../../store/actions';\r\nimport Message from '../../components/message/Message';\r\nimport './MessageList.scss';\r\n\r\nconst MessageList = ({ conversationId, getMessagesForConversation, loadMessages }) => {\r\n    const messageDetails = getMessagesForConversation(conversationId);\r\n    const messages = messageDetails ? messageDetails.messages: null;\r\n    let messageItems = null;\r\n\r\n    useEffect(() => {\r\n        if (!messageDetails) {\r\n            loadMessages(conversationId, null);\r\n        }\r\n    }, [messageDetails, loadMessages, conversationId])\r\n\r\n    if (messages && messages.length > 0) {\r\n        messageItems = messages.map((message, index) => {\r\n            return <Message \r\n                key={index}\r\n                isMyMessage={message.isMyMessage}\r\n                message={message} />;\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div id=\"chat-message-list\">\r\n            {messageItems}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    const getMessagesForConversation = conversationId => {\r\n        return state.messagesState.messageDetails[conversationId];\r\n    }\r\n\r\n    return {\r\n        getMessagesForConversation\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    const loadMessages = (conversationId, lastMessageId) => {\r\n        dispatch(messagesRequested(conversationId, 5, lastMessageId));\r\n    }\r\n\r\n    return { loadMessages };\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(MessageList);"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,iBAAT,QAAkC,qBAAlC;AACA,OAAOC,OAAP,MAAoB,kCAApB;AACA,OAAO,oBAAP;;AAEA,MAAMC,WAAW,GAAG,QAAkE;EAAA,IAAjE;IAAEC,cAAF;IAAkBC,0BAAlB;IAA8CC;EAA9C,CAAiE;EAClF,MAAMC,cAAc,GAAGF,0BAA0B,CAACD,cAAD,CAAjD;EACA,MAAMI,QAAQ,GAAGD,cAAc,GAAGA,cAAc,CAACC,QAAlB,GAA4B,IAA3D;EACA,IAAIC,YAAY,GAAG,IAAnB;EAEAV,SAAS,CAAC,MAAM;IACZ,IAAI,CAACQ,cAAL,EAAqB;MACjBD,YAAY,CAACF,cAAD,EAAiB,IAAjB,CAAZ;IACH;EACJ,CAJQ,EAIN,CAACG,cAAD,EAAiBD,YAAjB,EAA+BF,cAA/B,CAJM,CAAT;;EAMA,IAAII,QAAQ,IAAIA,QAAQ,CAACE,MAAT,GAAkB,CAAlC,EAAqC;IACjCD,YAAY,GAAGD,QAAQ,CAACG,GAAT,CAAa,CAACC,OAAD,EAAUC,KAAV,KAAoB;MAC5C,oBAAO,oBAAC,OAAD;QACH,GAAG,EAAEA,KADF;QAEH,WAAW,EAAED,OAAO,CAACE,WAFlB;QAGH,OAAO,EAAEF,OAHN;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAAP;IAIH,CALc,CAAf;EAMH;;EAED,oBACI;IAAK,EAAE,EAAC,mBAAR;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACKH,YADL,CADJ;AAKH,CAzBD;;AA2BA,MAAMM,eAAe,GAAGC,KAAK,IAAI;EAC7B,MAAMX,0BAA0B,GAAGD,cAAc,IAAI;IACjD,OAAOY,KAAK,CAACC,aAAN,CAAoBV,cAApB,CAAmCH,cAAnC,CAAP;EACH,CAFD;;EAIA,OAAO;IACHC;EADG,CAAP;AAGH,CARD;;AAUA,MAAMa,kBAAkB,GAAGC,QAAQ,IAAI;EACnC,MAAMb,YAAY,GAAG,CAACF,cAAD,EAAiBgB,aAAjB,KAAmC;IACpDD,QAAQ,CAAClB,iBAAiB,CAACG,cAAD,EAAiB,CAAjB,EAAoBgB,aAApB,CAAlB,CAAR;EACH,CAFD;;EAIA,OAAO;IAAEd;EAAF,CAAP;AACH,CAND;;AAQA,eAAeN,OAAO,CAClBe,eADkB,EAElBG,kBAFkB,CAAP,CAGbf,WAHa,CAAf"},"metadata":{},"sourceType":"module"}