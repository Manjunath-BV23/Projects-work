{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\Projects\\\\chat-app-react\\\\src\\\\containers\\\\shell\\\\ChatShell.js\";\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { conversationChanged, newMessageAdded, conversationDeleted, conversationsRequested } from '../../store/actions';\nimport ConversationSearch from '../../components/conversation/conversation-search/ConversationSearch';\nimport NoConversations from '../../components/conversation/no-conversations/NoConversations';\nimport ConversationList from '../../components/conversation/conversation-list/ConversationList';\nimport NewConversation from '../../components/conversation/new-conversation/NewConversation';\nimport ChatTitle from '../../components/chat-title/ChatTitle';\nimport MessageList from '../message/MessageList';\nimport ChatForm from '../../components/chat-form/ChatForm';\nimport './ChatShell.scss';\n\nconst ChatShell = _ref => {\n  let {\n    conversations,\n    selectedConversation,\n    conversationChanged,\n    onMessageSubmitted,\n    onDeleteConversation,\n    loadConversations\n  } = _ref;\n  useEffect(() => {\n    loadConversations();\n  }, [loadConversations]);\n  let conversationContent = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(NoConversations, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }\n  }));\n\n  if (conversations.length > 0) {\n    conversationContent = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MessageList, {\n      conversationId: selectedConversation.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"chat-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ConversationSearch, {\n    conversations: conversations,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(ConversationList, {\n    onConversationItemSelected: conversationChanged,\n    conversations: conversations,\n    selectedConversation: selectedConversation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(NewConversation, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(ChatTitle, {\n    selectedConversation: selectedConversation,\n    onDeleteConversation: onDeleteConversation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }), conversationContent, /*#__PURE__*/React.createElement(ChatForm, {\n    selectedConversation: selectedConversation,\n    onMessageSubmitted: onMessageSubmitted,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }));\n};\n\nconst mapStateToProps = state => {\n  return {\n    conversations: state.conversationState.conversations,\n    selectedConversation: state.conversationState.selectedConversation\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  conversationChanged: conversationId => dispatch(conversationChanged(conversationId)),\n  onMessageSubmitted: messageText => {\n    dispatch(newMessageAdded(messageText));\n  },\n  onDeleteConversation: () => {\n    dispatch(conversationDeleted());\n  },\n  loadConversations: () => {\n    dispatch(conversationsRequested());\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatShell);","map":{"version":3,"names":["React","useEffect","connect","conversationChanged","newMessageAdded","conversationDeleted","conversationsRequested","ConversationSearch","NoConversations","ConversationList","NewConversation","ChatTitle","MessageList","ChatForm","ChatShell","conversations","selectedConversation","onMessageSubmitted","onDeleteConversation","loadConversations","conversationContent","length","id","mapStateToProps","state","conversationState","mapDispatchToProps","dispatch","conversationId","messageText"],"sources":["C:/Users/LENOVO/Projects/chat-app-react/src/containers/shell/ChatShell.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { conversationChanged, newMessageAdded, conversationDeleted, conversationsRequested } from '../../store/actions';\r\nimport ConversationSearch from '../../components/conversation/conversation-search/ConversationSearch';\r\nimport NoConversations from '../../components/conversation/no-conversations/NoConversations';\r\nimport ConversationList from '../../components/conversation/conversation-list/ConversationList';\r\nimport NewConversation from '../../components/conversation/new-conversation/NewConversation';\r\nimport ChatTitle from '../../components/chat-title/ChatTitle';\r\nimport MessageList from '../message/MessageList';\r\nimport ChatForm from '../../components/chat-form/ChatForm';\r\n\r\nimport './ChatShell.scss';\r\n\r\nconst ChatShell = ({ \r\n    conversations, \r\n    selectedConversation, \r\n    conversationChanged,\r\n    onMessageSubmitted,\r\n    onDeleteConversation,\r\n    loadConversations\r\n}) => {\r\n    useEffect(() => {\r\n        loadConversations();\r\n    }, [loadConversations]);\r\n\r\n    let conversationContent = (\r\n        <>\r\n            <NoConversations></NoConversations>\r\n        </>\r\n    );\r\n\r\n    if (conversations.length > 0) {\r\n        conversationContent = (\r\n            <>\r\n                <MessageList conversationId={selectedConversation.id} />\r\n            </>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div id=\"chat-container\">\r\n            <ConversationSearch conversations={conversations} />\r\n            <ConversationList\r\n                onConversationItemSelected={conversationChanged}\r\n                conversations={conversations}\r\n                selectedConversation={selectedConversation} />\r\n            <NewConversation />\r\n            <ChatTitle \r\n                selectedConversation={selectedConversation}\r\n                onDeleteConversation={onDeleteConversation} />\r\n            {conversationContent}\r\n            <ChatForm \r\n                selectedConversation={selectedConversation}\r\n                onMessageSubmitted={onMessageSubmitted} />\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        conversations: state.conversationState.conversations,\r\n        selectedConversation: state.conversationState.selectedConversation\r\n    };\r\n};\r\n  \r\nconst mapDispatchToProps = dispatch => ({\r\n    conversationChanged: conversationId => dispatch(conversationChanged(conversationId)),\r\n    onMessageSubmitted: messageText => { dispatch(newMessageAdded(messageText)); },\r\n    onDeleteConversation: () => { dispatch(conversationDeleted()); },\r\n    loadConversations: () => { dispatch(conversationsRequested())}\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ChatShell);"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,mBAAT,EAA8BC,eAA9B,EAA+CC,mBAA/C,EAAoEC,sBAApE,QAAkG,qBAAlG;AACA,OAAOC,kBAAP,MAA+B,sEAA/B;AACA,OAAOC,eAAP,MAA4B,gEAA5B;AACA,OAAOC,gBAAP,MAA6B,kEAA7B;AACA,OAAOC,eAAP,MAA4B,gEAA5B;AACA,OAAOC,SAAP,MAAsB,uCAAtB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,QAAP,MAAqB,qCAArB;AAEA,OAAO,kBAAP;;AAEA,MAAMC,SAAS,GAAG,QAOZ;EAAA,IAPa;IACfC,aADe;IAEfC,oBAFe;IAGfb,mBAHe;IAIfc,kBAJe;IAKfC,oBALe;IAMfC;EANe,CAOb;EACFlB,SAAS,CAAC,MAAM;IACZkB,iBAAiB;EACpB,CAFQ,EAEN,CAACA,iBAAD,CAFM,CAAT;EAIA,IAAIC,mBAAmB,gBACnB,uDACI,oBAAC,eAAD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EADJ,CADJ;;EAMA,IAAIL,aAAa,CAACM,MAAd,GAAuB,CAA3B,EAA8B;IAC1BD,mBAAmB,gBACf,uDACI,oBAAC,WAAD;MAAa,cAAc,EAAEJ,oBAAoB,CAACM,EAAlD;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EADJ,CADJ;EAKH;;EAED,oBACI;IAAK,EAAE,EAAC,gBAAR;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACI,oBAAC,kBAAD;IAAoB,aAAa,EAAEP,aAAnC;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EADJ,eAEI,oBAAC,gBAAD;IACI,0BAA0B,EAAEZ,mBADhC;IAEI,aAAa,EAAEY,aAFnB;IAGI,oBAAoB,EAAEC,oBAH1B;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAFJ,eAMI,oBAAC,eAAD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EANJ,eAOI,oBAAC,SAAD;IACI,oBAAoB,EAAEA,oBAD1B;IAEI,oBAAoB,EAAEE,oBAF1B;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAPJ,EAUKE,mBAVL,eAWI,oBAAC,QAAD;IACI,oBAAoB,EAAEJ,oBAD1B;IAEI,kBAAkB,EAAEC,kBAFxB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAXJ,CADJ;AAiBH,CA3CD;;AA6CA,MAAMM,eAAe,GAAGC,KAAK,IAAI;EAC7B,OAAO;IACHT,aAAa,EAAES,KAAK,CAACC,iBAAN,CAAwBV,aADpC;IAEHC,oBAAoB,EAAEQ,KAAK,CAACC,iBAAN,CAAwBT;EAF3C,CAAP;AAIH,CALD;;AAOA,MAAMU,kBAAkB,GAAGC,QAAQ,KAAK;EACpCxB,mBAAmB,EAAEyB,cAAc,IAAID,QAAQ,CAACxB,mBAAmB,CAACyB,cAAD,CAApB,CADX;EAEpCX,kBAAkB,EAAEY,WAAW,IAAI;IAAEF,QAAQ,CAACvB,eAAe,CAACyB,WAAD,CAAhB,CAAR;EAAyC,CAF1C;EAGpCX,oBAAoB,EAAE,MAAM;IAAES,QAAQ,CAACtB,mBAAmB,EAApB,CAAR;EAAkC,CAH5B;EAIpCc,iBAAiB,EAAE,MAAM;IAAEQ,QAAQ,CAACrB,sBAAsB,EAAvB,CAAR;EAAmC;AAJ1B,CAAL,CAAnC;;AAOA,eAAeJ,OAAO,CAClBqB,eADkB,EAElBG,kBAFkB,CAAP,CAGbZ,SAHa,CAAf"},"metadata":{},"sourceType":"module"}